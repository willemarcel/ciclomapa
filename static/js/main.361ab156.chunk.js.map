{"version":3,"sources":["img/itdp.png","img/ucb.png","img/normal.png","img/satelite.png","img/logo_green.svg","constants.js","Map.js","Spinner.js","CitySwitcherBackdrop.js","utils.js","TopBar.js","MapStyleSwitcher.js","LayersPanel.js","OSMController.js","Storage.js","geojsonUtils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","DEFAULT_ZOOM","IS_MOBILE","window","matchMedia","concat","matches","geocodingClient","mbxGeocoding","accessToken","Map","props","_this","Object","classCallCheck","this","_super","call","onMapMoved","bind","assertThisInitialized","e","coords","lngLat","features","properties","layer","layers","find","l","id","split","html","name","style","lineColor","popup","setLngLat","setHTML","addTo","map","hoverPopup","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","console","debug","setMaxBounds","reverseGeocode","query","types","limit","send","then","response","body","place","searchBar","setBbox","bbox","area","place_name","catch","err","error","message","getCenter","zoom","getZoom","toConsumableArray","filters","f","f2","_this3","getMapboxFilterForLayer","borderColor","addLayer","type","source","description","layout","line-join","line-cap","paint","objectSpread2","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","hoveredCycleway","setFeatureState","hover","selectedCycleway","showPopup","_this4","setLayoutProperty","showSatellite","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","_this5","getSource","setData","center","setCenter","isActive","join","_this6","mapboxgl","container","mapContainer","MapboxGeocoder","language","placeholder","countries","addControl","cityPicker","marker","clearOnBlur","flyTo","result","flyToPos","speed","minZoom","document","querySelector","classList","clear","NavigationControl","showCompass","geolocate","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","longitude","latitude","initLayers","Popup","closeOnClick","closeButton","className","_this7","react_default","a","createElement","ref","el","Component","Spinner","city","fontSize","role","aria-label","space","size","direction","es_button","onClick","onClose","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","CitySwitcherBackdrop","slugify","str","RegExp","toString","toLowerCase","replace","c","charAt","indexOf","typeSizes","undefined","boolean","number","string","item","object","keys","reduce","total","key","sizeOf","value","TopBar","Modal","info","title","content","href","target","rel","src","itdp","alt","ucb","onOk","add","focus","get","set","updatedAtStr","parts","state","lastUpdate","toLocaleString","height","align","showCityPicker","CaretDownFilled","color","date","Date","seconds","Math","floor","interval","timeSince","popover","placement","maxWidth","icon","RedoOutlined","ghost","forceUpdate","arrowPointAtCenter","InfoCircleOutlined","marginLeft","downloadData","DownloadOutlined","MapStyleSwitcher","selected","options","img","normal","satellite","prevState","onMapShowSatelliteChanged","option","i","setState","LayersPanel","newVal","onLayersChange","width","onChange","opacity","background","borderRadius","borderLeft","borderRight","lengths","fontWeight","round","es_switch","checked","servers","OSMController","constraints","areaId","f_inner","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","requests","_loop","endpoint","elements","abort","osmtogeojson","flatProperties","isLastRemainingRequest","status","fail","statusText","notification","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Storage","firebase","initializeApp","db","firestore","collection","querySnapshot","doc","compressed","pako","deflate","JSON","stringify","to","gzipCompress","jsonStr","updatedAt","part","slug","fullPrecisionFloats","saveToFirestore","part1","ceil","part2","exists","dataBuffer","getDataFromDB","parse","toDate","withRouterAndRef","Wrapped","WithRouter","withRouter","_ref","forwardRef","otherProps","objectWithoutProperties","assign","WithRouterAndRef","React","displayName","App","updateData","updateLengths","onSpinnerClose","prev","getStateFromLocalStorage","urlParams","getParamsFromURL","z","parseFloat","loading","mapStyle","loadLayers","layersStates","storage","addEventListener","saveStateToLocalStorage","getLayers","savedState","localStorage","getItem","requestAnimationFrame","setItem","newLengths","URLSearchParams","location","search","paramsObj","oldData","newData","nbrOldFeatures","nbrNewFeatures","arguments","_options$areaName","areaName","log","getData","isDataHealthy","Error","now","save","dataUpdatedAt","getDataFromOSM","load","newLayers","feature","partsToMatch","propertyKey","cleanUpOSMTags","fileName","blob","Blob","saveAs","downloadObjectAsJson","onRouteChanged","params","toFixed","history","push","newState","src_TopBar_0","src_CitySwitcherBackdrop_0","src_Map_0","src_MapStyleSwitcher_0","src_LayersPanel_0","src_Spinner_0","Boolean","hostname","match","ReactDOM","render","react_router_dom","src_App_0","app","ciclomapa","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.361ab156.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itdp.c441e7e0.png\";","module.exports = __webpack_public_path__ + \"static/media/ucb.8a36a689.png\";","module.exports = __webpack_public_path__ + \"static/media/normal.9a5dc9c9.png\";","module.exports = __webpack_public_path__ + \"static/media/satelite.a853a709.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_green.d4480602.svg\";","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Fortaleza, Ceará, Brazil';\nexport const DEFAULT_LNG = -38.5225359;\nexport const DEFAULT_LAT = -3.7719909;\nexport const DEFAULT_ZOOM = 10.9;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;\n\nexport const TOPBAR_HEIGHT = 64;\n\nexport const MOBILE_MAX_WIDTH = '430px';\nexport const DESKTOP_MIN_WIDTH = '430px';\nexport const IS_MOBILE = window.matchMedia && window.matchMedia(`(max-width: ${MOBILE_MAX_WIDTH})`).matches;","import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { MAPBOX_ACCESS_TOKEN, IS_MOBILE, DEFAULT_ZOOM } from './constants.js'\n\nimport './Map.css'\n\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass Map extends Component {\n    map;\n    popup;\n    searchBar;\n    hoverPopup;\n    selectedCycleway;\n    hoveredCycleway;\n\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        html += `\n            <h2 style=\"margin-top: 1em; font-size: 22px;\">\n                ${props.name ? props.name : '<i style=\"color: gray;\">Sem nome</i>'}\n            </h2>`;\n\n        html += `\n            <div style=\"font-size: 14px\">\n                <div class=\"pill\" style=\"background-color: ${layer.style.lineColor}\">\n                    ${layer.name}\n                </div>\n            </div>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        // const prettyProps = JSON.stringify(props, null, 2)\n        //     .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        //     .replace(/\"|,|\\{|\\}/g, '');\n        // html += prettyProps;\n\n        html += `\n            <div class=\"footer\">\n                Acha que este dado pode ser melhorado?\n                <br>\n                <a\n                    target=\"_BLANK\"\n                    rel=\"noopener\"\n                    href=\"https://www.openstreetmap.org/${props.id}\"\n                >\n                    Editar no OSM →\n                </a>\n            </div>\n    `;\n\n        this.popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(this.map);\n    }\n\n    showHoverPopup(e) {\n        const coords = e.lngLat;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        this.hoverPopup.setLngLat(coords)\n            .setHTML(`<h3>${layer.name}<h3>`)\n            .addTo(this.map);\n    }\n\n    hidePopup() {\n        this.popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (this.map) {\n            const sw = this.map.getBounds().getSouthWest();\n            const ne = this.map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    reverseGeocode(lngLat) {\n        console.debug('lngLat', lngLat);\n\n        if (!lngLat || !lngLat[0] || !lngLat[1]) {\n            console.error('Something wrong with lngLat passed.');\n            return;\n        }\n\n        // Clear previous map panning limits\n        this.map.setMaxBounds();\n\n        geocodingClient\n            .reverseGeocode({\n                query: lngLat,\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const features = response.body.features;\n\n                console.debug('reverseGeocode', features);\n\n                if (features && features[0]) {\n                    const place = features[0];\n\n                    if (this.searchBar) {\n                        this.searchBar.setBbox(place.bbox);\n                    }\n\n                    // Disabled temporarily because it had a bug that it changed the map center\n                    // this.map.once('moveend', () => {\n                    //     this.map.setMaxBounds([\n                    //         [place.bbox[0]-0.15, place.bbox[1]-0.15], // Southwest coordinates\n                    //         [place.bbox[2]+0.15, place.bbox[3]+0.15]  // Northeast coordinates\n                    //     ]); \n                    // });\n                    \n                    this.props.onMapMoved({area: place.place_name});\n                }\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n    }\n\n    onMapMoved() {\n        const lat = this.map.getCenter().lat;\n        const lng = this.map.getCenter().lng;\n        const zoom = this.map.getZoom();\n\n        this.props.onMapMoved({\n            lat: lat,\n            lng: lng,\n            zoom: zoom,\n        });\n\n        // console.debug('onMapMoved');\n    }\n\n    getMapboxFilterForLayer(l) {\n        return [\n            \"any\",\n            ...l.filters.map(f =>\n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [\"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n            )\n        ];\n    }\n\n    addDynamicLayer(l) {\n        const filters = this.getMapboxFilterForLayer(l);\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            this.map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"], \n                            10, 2,\n                            18, [ 'case',\n                                ['boolean', ['feature-state', 'hover'], false],\n                                l.style.lineWidth*6,\n                                l.style.lineWidth*3\n                            ]\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [.2, 2.5]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n\n            // Line\n            this.map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            10, 2,\n                            18, [ 'case',\n                                ['boolean', ['feature-state', 'hover'], false],\n                                (l.style.lineWidth - l.style.borderWidth)*6,\n                                (l.style.lineWidth - l.style.borderWidth)*3\n                            ]\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [.2, 2.5]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n        } else {\n            this.map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            10, 2,\n                            18, [ 'case',\n                                ['boolean', ['feature-state', 'hover'], false],\n                                l.style.lineWidth*6,\n                                l.style.lineWidth*3\n                            ]\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [.2, 2.5]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        this.map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                this.map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                if (this.hoveredCycleway) {\n                    this.map.setFeatureState({ source: 'osm', id: this.hoveredCycleway }, { hover: false });\n                }\n                this.hoveredCycleway = e.features[0].id;\n                this.map.setFeatureState({ source: 'osm', id: this.hoveredCycleway }, { hover: true });\n\n                // this.showHoverPopup(e);\n            }\n        });\n\n        this.map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            if (this.hoveredCycleway && !this.selectedCycleway) {\n                this.map.setFeatureState({ source: 'osm', id: this.hoveredCycleway }, { hover: false });\n\n                // Cursor cursor\n                this.map.getCanvas().style.cursor = '';\n            }\n            this.hoveredCycleway = null;\n        });\n\n        this.map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (this.selectedCycleway) {\n                    this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { hover: false });\n                }\n                this.selectedCycleway = e.features[0].id;\n                this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { hover: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        console.debug('initLayers');\n\n        this.map.setLayoutProperty(\n            'satellite',\n            'visibility',\n            this.props.showSatellite ? 'visible' : 'none');\n\n        this.map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n\n        // this.map.addSource('some id', {\n        //     type: 'geojson',\n        //     // data: 'http://overpass-api.de/api/interpreter?data=node[amenity=school](bbox);out;(way[amenity=school](bbox);node(w););out;'\n        //     // data: 'http://overpass-api.de/api/interpreter?data=node[name=%22Im Tannenbusch%22][highway=bus_stop];out+skel;'\n        //     data: 'https://firebasestorage.googleapis.com/v0/b/ciclomapa-app.appspot.com/o/ciclomapa-Nitero%CC%81i%2C%20Rio%20De%20Janeiro%2C%20Brazil.json?alt=media&token=79733a19-009d-46f1-af7b-e55bb3dd9bb5'\n        // });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.map || !this.map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            this.map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.showSatellite !== prevProps.showSatellite) {\n            this.map.setLayoutProperty(\n                'satellite',\n                'visibility',\n                this.props.showSatellite ? 'visible' : 'none');\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     this.map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            this.map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                this.map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    this.map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        this.map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        // Native Mapbox map controls\n\n        if (!IS_MOBILE) {\n            this.searchBar = new MapboxGeocoder({\n                accessToken: mapboxgl.accessToken,\n                mapboxgl: mapboxgl,\n                language: 'pt-br',\n                placeholder: 'Buscar endereços, estabelecimentos, ...',\n                countries: 'br',\n                // collapsed: IS_MOBILE\n            });\n            this.map.addControl(this.searchBar, 'bottom-right');\n        }\n\n        const cityPicker = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            language: 'pt-br',\n            placeholder: 'Buscar cidades brasileiras',\n            countries: 'br',\n            types: 'place',\n            marker: false,\n            clearOnBlur: true,\n            flyTo: false\n        });\n        cityPicker.on('result', result => {\n            console.debug('geocoder result', result);\n\n            let flyToPos;\n            if (result.place_name === 'Vitória, Espírito Santo, Brasil') {\n                flyToPos = [-40.3144,-20.2944];\n            } else {\n                flyToPos = result.result.center;\n            }\n            this.map.flyTo({\n                center: flyToPos,\n                zoom: DEFAULT_ZOOM,\n                speed: 2,\n                minZoom: 6\n            });\n\n            this.reverseGeocode(result.result.center);\n            \n            // Hide UI\n            // @todo refactor this to use React state\n            document.querySelector('body').classList.remove('show-city-picker');\n            cityPicker.clear();\n        });\n        this.map.addControl(cityPicker, 'top-left');\n\n        this.map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        const geolocate = new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: false\n        });\n        geolocate.on('geolocate', result => {\n            console.debug('geolocate', result); \n            this.reverseGeocode([result.coords.longitude, result.coords.latitude]);\n        });\n        this.map.addControl(geolocate, 'bottom-right');\n        \n        \n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n\n\n        // Listeners\n\n        this.map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            this.map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            // this.map.on('style.load', () => {\n            //     this.initLayers();\n            //     this.onMapMoved();\n            // });\n        });\n\n\n        this.popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        this.popup.on('close', e => {\n            if (this.selectedCycleway) {\n                this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { hover: false });\n            }\n            this.selectedCycleway = null;\n        });\n\n        this.hoverPopup = new mapboxgl.Popup({\n            closeButton: false,\n            className: 'hover-popup'\n        });\n        \n        // Initialize map data center\n        this.reverseGeocode(this.props.center);\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport { Button, Space } from 'antd';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        const parts = this.props.area.split(',');\n        const city = parts[0];\n            // state = parts[1],\n            // country = parts[2];\n\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    {\n                        this.props.error ?\n                            <div>\n                                <div style={{fontSize: '42px'}}>\n                                    <span role=\"img\" aria-label=\"Emoji triste\">😓</span>\n                                </div>\n\n                                <div className=\"content\">\n                                    <h1>\n                                        Ops!\n                                    </h1>\n\n                                    <Space size=\"large\" direction=\"vertical\">\n                                        <h3>\n                                            O OSM está mal humorado neste momento e não conseguimos acessar os dados. Tente novamente mais tarde.\n                                        </h3>\n\n                                        <Button \n                                            type=\"primary\"\n                                            onClick={this.props.onClose}>\n                                            OK\n                                        </Button>\n                                    </Space>\n                                </div>\n                            </div>\n                            :\n                            <div>\n                                <svg className=\"spinnersvg\" viewBox='25 25 50 50'>\n                                    <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                                    />\n                                </svg>\n\n                                <div className=\"content\">\n                                    <h1>\n                                        Carregando mapa cicloviário de <b>{city}</b>.\n                                    </h1>\n\n                                    <h3>\n                                        Estamos acessando diretamente os dados mais atualizados do OpenStreetMaps. Isso pode levar algumas dezenas segundos dependendo do tamanho da cidade.\n                                    </h3>\n                                </div>\n                            </div>\n\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport './CitySwitcherBackdrop.css'\n\nimport { Button } from 'antd';\n\n\nclass CitySwitcherBackdrop extends Component {\n    onClose() {\n        let body = document.querySelector('body');\n        body.classList.remove('show-city-picker')\n    }\n\n    render() {\n        return (\n            <div id=\"backdrop\" onClick={this.onClose}>\n                <Button\n                    id=\"closeBtn\"\n                    // ghost\n                    // shape=\"circle\"\n                    // icon=\"close\"\n                    type=\"link\"\n                    size=\"large\"\n                    onClick={this.onClose}\n                >\n                    Cancelar\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default CitySwitcherBackdrop;","import { saveAs } from 'file-saver';\n\n\nexport function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(data, fileName) {\n    const blob = new Blob([JSON.stringify(data)], {\n        type: 'application/json',\n        name: fileName\n    }); \n    saveAs(blob, fileName);\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}\n\nconst typeSizes = {\n    \"undefined\": () => 0,\n    \"boolean\": () => 4,\n    \"number\": () => 8,\n    \"string\": item => 2 * item.length,\n    \"object\": item => !item ? 0 : Object\n        .keys(item)\n        .reduce((total, key) => sizeOf(key) + sizeOf(item[key]) + total, 0)\n};\n\nexport const sizeOf = value => typeSizes[typeof value](value);\n\n// Thanks https://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site\nexport function timeSince(date) {\n    date = new Date(date);\n\n    var seconds = Math.floor((new Date() - date) / 1000);\n\n    var interval = Math.floor(seconds / 31536000);\n\n    if (interval > 1) {\n        return interval + \" anos\";\n    }\n    interval = Math.floor(seconds / 2592000);\n    if (interval > 1) {\n        return interval + \" meses\";\n    }\n    interval = Math.floor(seconds / 86400);\n    if (interval > 1) {\n        return interval + \" dias\";\n    }\n    interval = Math.floor(seconds / 3600);\n    if (interval > 1) {\n        return interval + \" horas\";\n    }\n    interval = Math.floor(seconds / 60);\n    if (interval > 1) {\n        return interval + \" minutos\";\n    }\n    // return Math.floor(seconds) + \" segundos\";\n    return \" poucos segundos\";\n}","import React, { Component } from 'react';\n\nimport { TOPBAR_HEIGHT, IS_MOBILE } from './constants'\n\nimport { DownloadOutlined, InfoCircleOutlined, RedoOutlined, CaretDownFilled} from '@ant-design/icons';\n\nimport { Space, Modal, Button, Popover } from 'antd';\n\nimport { timeSince } from './utils.js'\n\nimport { get, set } from 'idb-keyval';\n\nimport itdp from './img/itdp.png';\nimport ucb from './img/ucb.png';\nimport logo from './img/logo_green.svg';\n\nimport './TopBar.css'\n\nclass TopBar extends Component {\n    info() {\n        Modal.info({\n            title: 'Sobre',\n            className: 'about-modal',\n            content: (\n                <div>\n                    <p>\n                        O <b>CicloMapa</b> é uma ferramenta que busca ampliar a visibilidade das infraestruturas cicloviárias (ou a falta delas), disponibilizando dados que auxiliem a incidência em políticas públicas para a ciclomobilidade.\n                    </p>\n\n                    <p>\n                        Utilizando o <a href=\"https://www.openstreetmap.org/\" title=\"OpenStreetMap\" target=\"_blank\" rel=\"noopener noreferrer\">OpenStreetMap</a>, uma plataforma colaborativa de mapeamento de dados geo-espaciais abertos, também procura engajar a comunidade em sua atualização.\n                    </p>\n\n                    <p>\n                        Para saber mais sobre a iniciativa e como contribuir com o mapeamento de sua cidade, acesse a <a href=\"https://www.uniaodeciclistas.org.br/atuacao/ciclomapa/\" title=\"CicloMapa | UCB - União de Ciclistas do Brasil\" target=\"_blank\" rel=\"noopener noreferrer\">página do projeto no site da UCB</a>.\n                    </p>\n\n                    <p>\n                        Este é um projeto de código aberto (<i>Open Source</i>) e pode ser encontrado no <a href=\"https://github.com/cmdalbem/ciclomapa/\" title=\"GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.\n                    </p>\n\n                    <div>\n                        Realização:\n\n                        <div className=\"logos\">\n                            <a href=\"https://itdpbrasil.org/\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={itdp} alt=\"Logo do ITDP\"></img>\n                            </a>\n                            <a href=\"https://www.uniaodeciclistas.org.br/\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={ucb} alt=\"Logo da UCB\"></img>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            ),\n            onOk() { },\n        });\n    }\n\n    showCityPicker() {\n        let body = document.querySelector('body');\n        body.classList.add('show-city-picker');\n        body.querySelector('.mapboxgl-ctrl-top-left .mapboxgl-ctrl-geocoder input').focus();\n    }\n\n    componentDidMount() {\n        get('hasSeenWelcomeMsg')\n                .then(data => {\n                    if (!data) {\n                        this.info();\n                        set('hasSeenWelcomeMsg', true);\n                    }\n                });\n    }\n\n    render() {\n        const parts = this.props.title.split(',');\n        const city = parts[0], \n            state = parts[1];\n            // country = parts[2];\n        let updatedAtStr;\n\n        if (this.props.lastUpdate) {\n            updatedAtStr = this.props.lastUpdate.toLocaleString('pt-BR');\n        }\n        \n        return (\n            <div className=\"topbar\" style={{height: TOPBAR_HEIGHT}}>\n                <div id=\"logo\" className=\"logo\">\n                    {/* <img src={logo} alt=\"CicloMapa\"></img> */}\n                    Ciclomapa\n                </div>\n\n                <div className=\"city-picker\">\n                    <Space size={4} direction=\"vertical\" align=\"center\">\n                        <Button\n                            size={IS_MOBILE ? 'default' : 'large'}\n                            onClick={this.showCityPicker}\n                        >\n                            <h3 className=\"areaname\">\n                                <span className=\"state\">\n                                    {state}\n                                </span>\n                                <span className=\"city\">\n                                    {city}\n                                </span>\n\n                                <CaretDownFilled style={{ fontSize: '16px', color: '#4ba96e' }} />\n                            </h3>\n                        </Button>\n\n                        {\n                            this.props.lastUpdate &&\n                            <span className=\"data-tooltip\">\n                                Atualizado há <b>{timeSince(this.props.lastUpdate)}</b>.\n                                <Popover\n                                    placement=\"bottom\"\n                                    content={(\n                                        <div style={{ maxWidth: 250 }}>\n                                            <Space size=\"small\" direction=\"vertical\" >\n                                                <div>\n                                                    O mapa que você está vendo é uma cópia dos dados obtidos do OpenStreetMaps em <b>{updatedAtStr}</b>.\n                                                </div> \n\n                                                <Button\n                                                    size=\"small\"\n                                                    icon={<RedoOutlined />}\n                                                    ghost\n                                                    onClick={this.props.forceUpdate}\n                                                >\n                                                    Atualizar\n                                                </Button>\n                                            </Space>\n                                        </div>\n                                    )}\n                                    arrowPointAtCenter={true}\n                                >\n                                    <InfoCircleOutlined style={{ fontSize: '12px', marginLeft: '4px' }} />\n                                </Popover>\n                            </span>\n\n                        }\n                    </Space>\n                </div>\n                \n                <div className=\"nav-links\">\n                    <Button\n                        size=\"large\"\n                        type=\"link\"\n                        onClick={this.info}\n                    >\n                        Sobre\n                    </Button>\n\n                    <Button\n                        ghost\n                        onClick={this.props.downloadData}\n                    >\n                        <DownloadOutlined /> Dados\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TopBar;","import React, { Component } from 'react';\n\n// import light from './img/light.png';\nimport normal from './img/normal.png';\nimport satellite from './img/satelite.png';\n\nimport './MapStyleSwitcher.css'\n\nclass MapStyleSwitcher extends Component {\n    state = { selected: this.props.showSatellite ? 1 : 0 };\n\n    options = [\n        {\n            name: 'dark',\n            img: normal,\n            // url: 'mapbox://styles/cmdalbem/ck14cy14g1vb81cp8hprnh4nx'\n        },\n        // {\n        //     img: light,\n        //     url: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'\n        // },\n        {\n            name: 'satellite',\n            img: satellite\n        },\n    ];\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state !== prevState) {\n            const selected = this.options[this.state.selected]\n            // this.props.onMapStyleChange(selected.url)\n\n            this.props.onMapShowSatelliteChanged(selected.name === 'satellite');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"switcher-bar\">\n                {\n                    this.options.map( (option, i) =>\n                        <div\n                            onClick={() => this.setState({ selected: i })}\n                            className={this.state.selected === i ? 'selected' : ''}\n                            key={option.img}\n                        >\n                            <img src={option.img} alt=\"\"/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Popover } from 'antd';\n\nimport { slugify } from './utils.js'\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <Popover\n                            placement=\"left\"\n                            content={(\n                                <div style={{ maxWidth: '250px' }}>\n                                    <p>\n                                        <img style={{ width: '100%' }} src={'/' + slugify(l.name) + '.png'} alt=\"\"></img>\n                                    </p>\n                                    <div>\n                                        {l.description}\n                                    </div>\n                                </div>\n                            )}\n                            arrowPointAtCenter={true}\n                            key={l.name}\n                        >\n                            <div\n                                className=\"layer-row\"\n                                onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                                style={{ opacity: l.isActive ? 1 : .5 }}\n                            >\n                                <div>\n                                    <span\n                                        className=\"layer-miniature\" \n                                        style={{\n                                            height: l.style.lineWidth * 2,\n                                            background: l.style.lineStyle === 'solid' ?\n                                                l.style.lineColor\n                                                : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, transparent 3px, transparent 6px)`,\n                                            borderColor: l.style.borderColor,\n                                            borderStyle: l.style.borderStyle,\n                                            borderRadius: '2px',\n                                            borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                            borderLeft: 'none',\n                                            borderRight: 'none'\n                                    }}\n                                    ></span>\n\n                                    <span className=\"layer-name\">\n                                        {l.name} \n                                    </span>\n\n                                    {\n                                        this.props.lengths\n                                            && Object.keys(this.props.lengths).length > 0\n                                            && this.props.lengths[l.id] > 0\n                                            && <span className=\"layer-length\" style={{ fontWeight: 300, opacity: .5 }}>\n                                                {Math.round(this.props.lengths[l.id])}km\n                                        </span>\n                                    }\n                                </div>\n\n                                <Switch size=\"small\" checked={l.isActive} />\n                            </div>\n                        </Popover>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","/* eslint-disable no-loop-func */\nimport osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nconst servers = [\n    'https://overpass.kumi.systems/api/interpreter',\n    'https://overpass-api.de/api/interpreter',\n    'http://overpass.openstreetmap.fr/api/interpreter',\n    'http://overpass.osm.ch/api/interpreter',\n    'https://overpass.nchc.org.tw'\n];\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:500];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = l.style.borderWidth || DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    let areaId\n                    if (constraints.area === 'Vitória, Espirito Santo, Brazil') {\n                        areaId = 3601825817;\n                    } else if (constraints.area === 'Brasília, Distrito Federal, Brazil') {\n                        areaId = 3602662005;\n                    } else {\n                        areaId = 3600000000 + nominatimData[0].osm_id;\n                    }\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    let requests = [];\n                    for (let i = 0; i < servers.length; i++) {\n                        const endpoint = servers[i] + '?data=' + encodedQuery;\n                        \n                        console.debug(i + ' OSM server: ' + servers[i]);\n\n                        requests[i] = $.getJSON(\n                            endpoint,\n                            data => {\n                                if (data.elements.length > 0) {\n                                    console.debug('SUCCESS! @ ' + i);\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            console.debug('Aborting ' + r);\n                                            requests[r].abort();\n                                        }\n                                    }\n    \n                                    console.debug('osm data: ', data);\n                                    geoJson = osmtogeojson(data, { flatProperties: true });\n                                    console.debug('converted to geoJSON: ', geoJson);\n                                    \n                                    resolve({\n                                        geoJson: geoJson\n                                    });\n                                } else {\n                                    console.debug(`Server ${i} returned an empty result.`);\n\n                                    // Check if I'm the last one\n                                    let isLastRemainingRequest = true;\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            if (requests[r].status === undefined) {\n                                                isLastRemainingRequest = false;\n                                            }\n                                        }\n                                    }\n                                    if (isLastRemainingRequest) {\n                                        console.debug('I was the last one, so probably the result is empty.');\n                                        resolve({ geoJson: null });\n                                    }\n                                }\n                            }).fail(e => {\n                                if (e.statusText !== 'abort') {\n                                    console.error(`Servidor ${i} deu erro:`, e);\n                                }\n                            });\n                    }\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","import { get, set } from 'idb-keyval';\n\nimport firebase from 'firebase';\n\nimport { slugify, sizeOf } from './utils.js'\nimport { gzipCompress } from './geojsonUtils.js'\nimport { stringify, parse } from 'zipson';\n\n\nconst DISABLE_LOCAL_STORAGE = true;\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDUbMY3UuyJ9vVVBblhUR9L1B3TV6a3eRU\",\n    authDomain: \"ciclomapa-app.firebaseapp.com\",\n    databaseURL: \"https://ciclomapa-app.firebaseio.com\",\n    projectId: \"ciclomapa-app\",\n    storageBucket: \"ciclomapa-app.appspot.com\",\n    messagingSenderId: \"377722964538\",\n    appId: \"1:377722964538:web:bc0fada0b3db0587514303\"\n};\n\nclass Storage {\n    db;\n    dataBuffer;\n    \n    constructor() {\n        firebase.initializeApp({\n            apiKey: firebaseConfig.apiKey,\n            authDomain: firebaseConfig.authDomain,\n            projectId: firebaseConfig.projectId\n        });\n\n        this.db = firebase.firestore();\n    }\n\n    getAllCitiesDocs() {\n        return new Promise(resolve => {\n            this.db.collection(\"cities\").get().then((querySnapshot) => {\n                console.debug('[Firestore] Documents found:');\n                querySnapshot.forEach((doc) => {\n                    console.debug('• ' + doc.id, ' => ', doc.data());\n                });\n    \n                resolve(querySnapshot);\n            });\n        });\n    }\n\n    compressJson(data) {\n        console.debug('Before: ', sizeOf(data));\n\n        // Minimize size by cleaning clearing OSM tags\n        // @todo DOESNT WORK because Mapbox needs the OSM tags to render the layers\n        // cleanUpOSMTags(data);\n        \n        // Compress with gzip\n        const compressed = gzipCompress(data);\n\n        console.debug('After: ', sizeOf(compressed));\n\n        return compressed;\n    }\n\n    saveToFirestore(name, jsonStr, updatedAt, part) {\n        let slug = slugify(name);\n\n        if (part === 2) {\n            slug += part;\n        }\n\n        return this.db.collection('cities').doc(slug).set({\n            name: name,\n            geoJson: jsonStr,\n            updatedAt: updatedAt,\n            part: part || ''\n        });\n    }\n\n    save(name, geoJson, updatedAt) {\n        // Save to Local Storage\n        set(name, {\n            geoJson: geoJson,\n            updatedAt: updatedAt\n        });\n\n        // Save to Firestore\n        try {\n            const jsonStr = stringify(geoJson, { fullPrecisionFloats: true }); \n\n            // Useful for checking in the console the size differences\n            // console.debug('regular stringfy:', JSON.stringify(geoJson));\n            // console.debug('zipson stringfy:', jsonStr);\n\n            console.debug(`[Firebase] Saving document ${name}...`, geoJson);\n\n            // geoJson = this.compressJson(geoJson);\n            this.saveToFirestore(name, jsonStr, updatedAt)\n                .then(() => {\n                    console.debug(`[Firebase] Document ${name} written successfully.`);\n                }).catch(error => {\n                    console.debug('[Firestore] Failed saving full data, splitting in 2...')\n\n                    const part1 = jsonStr.slice(0, Math.ceil(jsonStr.length/2));\n                    const part2 = jsonStr.slice(Math.ceil(jsonStr.length/2));\n\n                    this.saveToFirestore(name, part1, updatedAt, 1) \n                    .then(() => {\n                        console.debug(`[Firebase] Document ${name}1 written successfully.`);\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });        \n \n                    this.saveToFirestore(name, part2, updatedAt, 2)\n                    .then(() => {\n                        console.debug(`[Firebase] Document ${name}2 written successfully.`);\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });\n                });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getDataFromDB(slug, resolve, reject) {\n        this.db.collection(\"cities\").doc(slug).get().then(doc => {\n            if (doc.exists) {\n                let data = doc.data();\n\n                console.debug(\"[Firebase] Document data:\", data);\n\n                // Decompress gzip\n                // data.geoJson = gzipDecompress(data.geoJson)\n\n                // Split files case\n                if (data.part === 1) {\n                    this.dataBuffer = data.geoJson; \n                    return this.getDataFromDB(slug + '2', resolve, reject);\n                } else if (data.part === 2) {\n                    data.geoJson = this.dataBuffer + data.geoJson;\n                }\n \n                try {\n                    data.geoJson = parse(data.geoJson);\n                } catch(e) {\n                    // For retrocompatibility\n                    data.geoJson = JSON.parse(data.geoJson);\n                }\n                data.updatedAt = data.updatedAt.toDate();\n\n                resolve(data);\n            } else {\n                console.debug(\"[Firebase] No document for: \", slug);\n                resolve();\n            }\n        }).catch(error => {\n            console.error(`[Firebase] Error getting document: ${slug}`, error);\n            reject();\n        });\n    }\n\n    load(name) {\n        const slug = slugify(name);\n\n        return new Promise((resolve, reject) => {\n            if (!DISABLE_LOCAL_STORAGE) {\n                get(name).then( local => {\n                    if (local) {\n                        resolve(local);\n                    } else {\n                        this.getDataFromDB(slug, resolve, reject);\n                    }\n                })\n            } else {\n                this.getDataFromDB(slug, resolve, reject);\n            }\n        });\n    }\n}\n\nexport default Storage;","import pako from 'pako';\n// import { gzip } from 'zlib';\n\n\nexport function gzipDecompress(data) {\n    return JSON.parse(pako.inflate(data), { to: 'string' });\n}\n\nexport function gzipCompress(data) {\n    const compressed = pako.deflate(JSON.stringify(data), { to: 'string' });\n\n    // Test if compression went OK\n    // const decompressed = JSON.parse(pako.inflate(compressed), { to: 'string' });\n    // console.log(decompressed);\n\n    return compressed;\n}\n\nexport function cleanUpOSMTags(data) {\n    data.features.forEach(feature => {\n        Object.keys(feature.properties).forEach(propertyKey => {\n            if (propertyKey !== 'id' &&\n                propertyKey !== 'name' &&\n                propertyKey !== 'type')\n                delete feature.properties[propertyKey];\n        });\n    });\n}\n\nexport function computeTypologies(data, layers) {\n    const DEBUG = false;\n\n    data.features.forEach(feature => {\n        if (DEBUG) {\n            console.debug(`${feature.properties.id} (${feature.properties.name})`);\n        }\n\n        if (!feature.properties.type) {\n            // Reverse layers orders so the most important ones override less important ones.\n            //   Slice is used here to don't destructively reverse the original array.\n            layers.slice().reverse().forEach(layer => {\n                let match = false;\n                layer.filters.forEach(filter => {\n                    let partsToMatch;\n                    if (typeof filter[0] === 'object') {\n                        partsToMatch = [false, false];\n                    } else {\n                        partsToMatch = [false];\n                    }\n\n                    Object.keys(feature.properties).forEach(propertyKey => {\n                        if (typeof filter[0] === 'object') {\n                            if ((propertyKey === filter[0][0] &&\n                                feature.properties[propertyKey] === filter[0][1])) {\n                                partsToMatch[0] = true;\n                            }\n\n                            if ((propertyKey === filter[1][0] &&\n                                feature.properties[propertyKey] === filter[1][1])) {\n                                partsToMatch[1] = true;\n                            }\n                        } else {\n                            if ((propertyKey === filter[0] &&\n                                feature.properties[propertyKey] === filter[1])) {\n                                partsToMatch[0] = true;\n                            }\n                        }\n                    });\n\n                    if ((typeof filter[0] === 'object' && partsToMatch[0] && partsToMatch[1])\n                        || partsToMatch[0]) {\n                        match = true;\n                        \n                        // \"Proibido\" layer should have priority over the rest\n                        if (!feature.properties.type || feature.properties.type !== 'Proibido') {\n                            feature.properties.type = layer.name;\n                        }\n                        // console.debug(`.  .  → ${feature.properties.name} (${feature.properties.id}) = ${layer.name}`);\n                    }\n\n                    // console.debug(`.  .  ${filter} ${match ? '✓' : ''}`);\n                });\n\n                if (DEBUG && match) {\n                    console.debug(`.  ${layer.name}`);\n                }\n            });\n        }\n    });\n}","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { notification } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport CitySwitcherBackdrop from './CitySwitcherBackdrop.js'\nimport TopBar from './TopBar.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport Storage from './Storage.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, DEFAULT_ZOOM, OSM_DATA_MAX_AGE_MS } from './constants.js'\nimport { downloadObjectAsJson } from './utils.js'\nimport { computeTypologies, cleanUpOSMTags } from './geojsonUtils.js'\n\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n    storage;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        // this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapShowSatelliteChanged = this.onMapShowSatelliteChanged.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.updateLengths = this.updateLengths.bind(this);\n        this.onSpinnerClose = this.onSpinnerClose.bind(this);\n\n        const prev = this.getStateFromLocalStorage();\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            area: (prev && prev.area) || '',\n            showSatellite: (prev && prev.showSatellite) || false,\n            zoom: (prev && prev.zoom) || urlParams.z || DEFAULT_ZOOM,\n            center: [\n                (prev && prev.lng) || parseFloat(urlParams.lng) || DEFAULT_LNG,\n                (prev && prev.lat) || parseFloat(urlParams.lat) || DEFAULT_LAT],\n            geoJson: null,\n            loading: false,\n            mapStyle: 'mapbox://styles/cmdalbem/ck14cy14g1vb81cp8hprnh4nx',\n            layers: this.loadLayers(prev && prev.layersStates),\n            lengths: {}\n        };\n\n        this.storage = new Storage();\n\n        if (this.state.area) {\n            this.updateData();\n        }\n\n        window.addEventListener('beforeunload', e => {\n            this.saveStateToLocalStorage();\n        });\n    }\n\n    loadLayers(layersStates) {\n        let layers = OSMController.getLayers();\n\n        // Merge with locally saved state\n        if (layersStates && Object.keys(layersStates).length > 0) {\n            layers.forEach(l => {\n                if (layersStates[l.id]) {\n                    l.isActive = layersStates[l.id];\n                }\n            });\n        }\n\n        return layers;\n    }\n\n    getStateFromLocalStorage() {\n        const savedState = JSON.parse(window.localStorage.getItem('appstate'));\n        console.debug('Retrived saved state from local storage:', savedState);\n        return savedState;\n    }\n\n    saveStateToLocalStorage() {\n        requestAnimationFrame( () => {\n            let layersStates = {};\n            this.state.layers.forEach(l => {\n                layersStates[l.id] = l.isActive;\n            });\n\n            const state = {\n                area: this.state.area,\n                showSatellite: this.state.showSatellite,\n                zoom: this.state.zoom,\n                lng: this.state.lng,\n                lat: this.state.lat,\n                layersStates: layersStates\n            }\n\n            let str = JSON.stringify(state);\n            window.localStorage.setItem('appstate', str);\n        });\n    }\n\n    updateLengths(newLengths) {\n        this.setState({\n            lengths: newLengths\n        });\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    forceUpdate() {\n        this.updateData(true);\n    }\n\n    // geoJsonDiff(oldData, newData) {\n    //     console.debug('oldData', oldData);\n    //     console.debug('newData', newData);\n\n    //     let a = new Set(oldData.features.map(i => i.id));\n    //     let b = new Set(newData.features.map(i => i.id));        \n    //     // let a = new Set(oldData.features.map(i => JSON.stringify(i)));\n    //     // let b = new Set(newData.features.map(i => JSON.stringify(i)));\n\n    //     let a_minus_b = new Set([...a].filter(x => !b.has(x)));\n    //     let b_minus_a = new Set([...b].filter(x => !a.has(x)));\n    //     let a_intersect_b = new Set([...a].filter(x => b.has(x)));\n\n    //     // a_minus_b = [...a_minus_b].map(i => JSON.parse(i));\n    //     // b_minus_a = [...b_minus_a].map(i => JSON.parse(i));\n    //     // a_intersect_b = [...a_intersect_b].map(i => JSON.parse(i));\n    //     a_minus_b = [...a_minus_b];\n    //     b_minus_a = [...b_minus_a];\n    //     a_intersect_b = [...a_intersect_b];\n\n    //     console.debug('Removed:', a_minus_b);\n    //     console.debug('Added:', b_minus_a);\n    //     console.debug('Didnt change:', a_intersect_b);\n\n    //     notification.success({\n    //         message: 'Sucesso',\n    //         description:\n    //             a_minus_b.length === 0 && b_minus_a.length === 0 ?\n    //             <span>\n    //                 Não houve alterações no mapa cicloviários desde a última atualização.\n    //             </span>\n    //             :\n    //             <span>\n    //                 <b>{a_minus_b.length}</b> caminhos removidos e <b>{b_minus_a.length}</b> adicionados.\n    //             </span>\n    //     });\n    // }\n\n    isDataHealthy(oldData, newData) {\n        console.debug('oldData', oldData);\n        console.debug('newData', newData);\n\n        if (!oldData || !oldData.features) {\n            return true;\n        } else {\n            const nbrOldFeatures = oldData.features.length;\n            const nbrNewFeatures = newData.features.length;\n    \n            console.debug('nbrOldFeatures', nbrOldFeatures);\n            console.debug('nbrNewFeatures', nbrNewFeatures);\n    \n            return !(nbrNewFeatures === 0 || nbrNewFeatures < nbrOldFeatures*0.1);\n        }\n\n    }\n\n    getDataFromOSM(options = {}) {\n        const {areaName = this.state.area, forceUpdate} = options;\n\n        console.log('options', options);\n        console.log('areaName', areaName);\n        console.log('forceUpdate', forceUpdate);\n\n        this.setState({ loading: true });\n\n        return OSMController.getData({ area: areaName })\n            .then(newData => {\n                if (forceUpdate && !this.isDataHealthy(this.state.geoJson, newData.geoJson)) {\n                    throw new Error('New data is not healthy.');\n                } else {\n                    const now = new Date();\n                    this.storage.save(areaName, newData.geoJson, now);\n    \n                    // this.geoJsonDiff(this.state.geoJson, newData.geoJson);\n    \n                    this.setState({\n                        geoJson: newData.geoJson,\n                        dataUpdatedAt: now,\n                        loading: false\n                    });\n                }\n            }).catch(e => {\n                console.error(e);\n                this.setState({\n                    error: true\n                });\n            });\n    }\n\n    updateData(forceUpdate) {\n        if (this.state.area) {\n            if (forceUpdate) {\n                this.getDataFromOSM({forceUpdate: true});\n            } else {\n                // Try to retrieve previously saved data for this area\n                this.storage.load(this.state.area)\n                    .then(data => {\n                        if (data) {\n                            console.debug('Database data is fresh.');\n                            this.setState({\n                                geoJson: data.geoJson,\n                                dataUpdatedAt: new Date(data.updatedAt)\n                            });\n                        } else { \n                            console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                            this.getDataFromOSM();\n                        }\n                    }).catch(e => {\n                        notification['error']({\n                            message: 'Erro',\n                            description:\n                                'Ocorreu um erro ao acessar o banco de dados.',\n                        });\n                    });\n            }\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    // onMapStyleChange(newMapStyle) {\n    //     this.setState({ mapStyle: newMapStyle});\n    // }\n\n    onMapShowSatelliteChanged(showSatellite) {\n        this.setState({ showSatellite: showSatellite });\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    downloadData() {\n        computeTypologies(this.state.geoJson, this.state.layers);\n        cleanUpOSMTags(this.state.geoJson);\n        downloadObjectAsJson(this.state.geoJson, `ciclomapa-${this.state.area}`);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n\n        if (this.state.geoJson !== prevState.geoJson) {\n            if (!this.state.geoJson || (this.state.geoJson.features && this.state.geoJson.features.length === 0)) {\n                notification['warning']({\n                    message: 'Ops',\n                    description:\n                        'Não há dados cicloviários para esta cidade.',\n                });\n\n                // this.setState({\n                //     isDownloadUnavailable: true\n                // });\n            } else {\n                // this.setState({\n                //     isDownloadUnavailable: false\n                // });\n            }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        requestAnimationFrame(() => {\n            this.setState(newState);\n        });\n    }\n\n    onSpinnerClose() {\n        this.setState({\n            error: false,\n            loading: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar\n                    title={this.state.area}\n                    lastUpdate={this.state.dataUpdatedAt}\n                    downloadData={this.downloadData}\n                    // isDownloadUnavailable={this.state.isDownloadUnavailable}\n                    onMapMoved={this.onMapMoved}\n                    forceUpdate={this.forceUpdate}\n                />\n\n                <CitySwitcherBackdrop/>\n\n                <Map\n                    ref={(map) => { window.map = map }}\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    showSatellite={this.state.showSatellite}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                    updateLengths={this.updateLengths}\n                />\n\n                <div id=\"gradient-backdrop\"/>\n\n                <MapStyleSwitcher \n                    showSatellite={this.state.showSatellite}\n                    onMapShowSatelliteChanged={this.onMapShowSatelliteChanged}\n                />\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    lengths={this.state.lengths}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner\n                        area={this.state.area}\n                        error={this.state.error}\n                        onClose={this.onSpinnerClose}\n                    />\n                }\n            </div>\n        );\n    }\n}\n\nconst withRouterAndRef = Wrapped => {\n    const WithRouter = withRouter(({ forwardRef, ...otherProps }) => (\n        <Wrapped ref={forwardRef} {...otherProps} />\n    ))\n    const WithRouterAndRef = React.forwardRef((props, ref) => (\n        <WithRouter {...props} forwardRef={ref} />\n    ))\n    const name = Wrapped.displayName || Wrapped.name\n    WithRouterAndRef.displayName = `withRouterAndRef(${name})`\n    return WithRouterAndRef\n}\n\nexport default withRouterAndRef(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App ref={(app) => { window.ciclomapa = app }}/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}